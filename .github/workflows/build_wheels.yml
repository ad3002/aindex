name: Build and Publish

# Simplified CI/CD after emphf integration - no external dependencies required
# Builds wheels for Linux and macOS using local emphf sources

on:
  pull_request:
  release:
    types: [published]
  workflow_dispatch:

jobs:
  build_wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest] # Возвращаем macOS после упрощения зависимостей
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install system dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y make build-essential

      - name: Install system dependencies (macOS)
        if: runner.os == 'macOS'
        run: |
          # No additional dependencies needed - Xcode tools provide make and g++
          echo "macOS build tools ready"

      - name: Install system dependencies (Windows)
        if: runner.os == 'Windows'
        run: |
          choco install cmake git
          # Ensure Visual Studio tools are available
          echo "CMAKE_GENERATOR=Visual Studio 17 2022" >> $env:GITHUB_ENV

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install setuptools wheel cibuildwheel

      - name: Build wheels
        uses: pypa/cibuildwheel@v2.19.2
        env:
          # Build for all supported Python versions
          CIBW_BUILD: "cp38-* cp39-* cp310-* cp311-* cp312-*"
          CIBW_SKIP: "*-musllinux*"  # Пропускаем только musl Linux
          
          # Architecture-specific builds for macOS
          CIBW_ARCHS_LINUX: "x86_64 aarch64"
          CIBW_ARCHS_MACOS: "x86_64 arm64"
          
          # Set minimum macOS version for filesystem support
          MACOSX_DEPLOYMENT_TARGET: "10.15"
          
          # Platform-specific before_all commands
          CIBW_BEFORE_ALL_LINUX: |
            yum install -y make gcc-c++ || apt-get update && apt-get install -y make build-essential
            echo "Setting up build environment for Linux..."
            mkdir -p bin obj aindex/core aindex/bin
            echo "Copying Python scripts..."
            cp scripts/compute_aindex.py bin/
            cp scripts/compute_index.py bin/
            cp scripts/reads_to_fasta.py bin/
            echo "✓ Linux build environment ready"
          
          CIBW_BEFORE_ALL_MACOS: |
            echo "Setting up build environment for macOS..."
            mkdir -p bin obj aindex/core aindex/bin  
            echo "Copying Python scripts..."
            cp scripts/compute_aindex.py bin/
            cp scripts/compute_index.py bin/
            cp scripts/reads_to_fasta.py bin/
            echo "✓ macOS build environment ready"
          
          CIBW_BEFORE_ALL_WINDOWS: |
            mkdir external
            cd external
            git clone https://github.com/ad3002/emphf.git
            cd emphf
            cmake -G "Visual Studio 17 2022" .
            cmake --build . --config Release
            cd ..\\..
          
          # Platform-specific before_build commands
          CIBW_BEFORE_BUILD: |
            pip install pybind11 numpy
            python -c "import sys; print(f'Building for Python {sys.version}')"
            python -c "import pybind11; print(f'pybind11 include: {pybind11.get_include()}')"
          
          CIBW_BEFORE_BUILD_LINUX: |
            pip install pybind11 numpy
            python -c "import sys; print(f'Python: {sys.executable}')"
            python -c "import pybind11; print(f'pybind11: {pybind11.get_include()}')"
            # Set environment variable for cibuildwheel detection
            export CIBUILDWHEEL=1
            # Clean and build everything for current architecture
            make clean
            echo "=== Building for current architecture ==="
            make objects  # Build object files for current arch
            make $(find bin -name "compute_*" -o -name "kmer_counter" -o -name "generate_*" -o -name "build_*" -o -name "count_*" | head -1 | xargs dirname)/compute_mphf_seq || true
            make pybind11  # Build Python extension
            echo "Available binaries:"
            ls -la bin/ || echo "No bin directory"
          
          CIBW_BEFORE_BUILD_MACOS: |
            pip install pybind11 numpy
            python -c "import sys; print(f'Python: {sys.executable}')"
            python -c "import pybind11; print(f'pybind11: {pybind11.get_include()}')"
            echo "Build machine: $(uname -m)"
            echo "ARCHFLAGS: ${ARCHFLAGS:-not set}"
            # Set environment variable for cibuildwheel detection
            export CIBUILDWHEEL=1
            # Use ARCHFLAGS to determine target architecture
            if [[ "${ARCHFLAGS:-}" == *"-arch x86_64"* ]]; then
              export TARGET_ARCH=x86_64
              echo "=== Cross-compiling for x86_64 ==="
            elif [[ "${ARCHFLAGS:-}" == *"-arch arm64"* ]]; then
              export TARGET_ARCH=arm64
              echo "=== Cross-compiling for arm64 ==="
            else
              # Default to machine architecture if no ARCHFLAGS
              export TARGET_ARCH=$(uname -m)
              echo "=== Native build for $(uname -m) ==="
            fi
            # Clean and build everything for target architecture
            make clean
            if [[ "$TARGET_ARCH" == "arm64" ]]; then
              make arm64  # ARM64 optimized build
            else
              make all  # Standard x86_64 build
            fi
            echo "Available binaries:"
            ls -la bin/ || echo "No bin directory"
          
          CIBW_BEFORE_BUILD_WINDOWS: |
            pip install cmake pybind11 numpy
            python setup.py build_ext --inplace
          
          # Repair wheels (Linux only) - simplified macOS repair
          CIBW_REPAIR_WHEEL_COMMAND_LINUX: >
            auditwheel repair -w {dest_dir} {wheel}
          
          # Use simple copy for macOS to avoid architecture conflicts
          CIBW_REPAIR_WHEEL_COMMAND_MACOS: >
            cp {wheel} {dest_dir}
          
          # Test wheels - simplified for cross-platform compatibility
          CIBW_TEST_COMMAND_LINUX: |
            python -c "import aindex; print('✓ Import successful')"
          
          CIBW_TEST_COMMAND_MACOS: |
            python -c "import aindex; print('✓ Import successful')"
          
          CIBW_TEST_COMMAND_WINDOWS: |
            python -c "import aindex; print('✓ Import successful')"
          
          # Environment variables
          CIBW_ENVIRONMENT_LINUX: MAKEFLAGS="-j$(nproc)"
          CIBW_ENVIRONMENT_MACOS: MAKEFLAGS="-j$(sysctl -n hw.ncpu)"
          
        with:
          package-dir: .
          output-dir: wheelhouse
          config-file: "{package}/pyproject.toml"
          
      - uses: actions/upload-artifact@v4
        with:
          name: cibw-wheels-${{ matrix.os }}
          path: ./wheelhouse/*.whl

  build_sdist:
    name: Build source distribution
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y make build-essential

      - name: Build sdist
        run: |
          pip install setuptools wheel pybind11 numpy
          python setup.py sdist

      - uses: actions/upload-artifact@v4
        with:
          name: sdist
          path: dist/*.tar.gz

  upload_pypi:
    name: Upload to PyPI
    needs: [build_wheels, build_sdist]
    runs-on: ubuntu-latest
    if: github.event_name == 'release' && github.event.action == 'published'
    steps:
      - uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - uses: actions/download-artifact@v4
        with:
          pattern: cibw-wheels-*
          path: dist
          merge-multiple: true

      - uses: actions/download-artifact@v4
        with:
          name: sdist
          path: dist

      - name: List artifacts
        run: ls -la dist/

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@v1.8.10
        with:
          user: __token__
          password: ${{ secrets.PYPI_API_TOKEN }}